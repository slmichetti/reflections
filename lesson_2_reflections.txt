What happens when you initialize a repository? Why do you need to do it?
When I create a repository, git creates a directory that tracks all the versions I save. This repository also lets me group all the files i want tracked together. 

How is the staging area different from the working directory and the repository? What value do you think it offers?
The staging area is the intermediate area that allows me to add the items I choose before having their changes committed to the repository. This allows me to add changes to the staging area one-by-one, then commit them together, which makes it easier to specify what changes should be grouped together into a commit. It allows me to identify these groupings, making the groups more logical than an auto-save function. The value of the staging area is the flexibility it allows to save files as I'm ready or at a point of completion that makes sense to group and identify the changes, hopefully making it easier after the fact to find changes that may have bugs or making it easy to identify what changes were made when. 

How can you use the staging area to make sure you have one commit per logical change?
The staging area allows me to view the changes I am making compared to the most recent commit. By viewing those differences, I can confirm I have logical changes grouped together and not multiples before finalizing the commit. I am also able to use git diff (with no arguments) to verify any changes I've made that haven't been added to the staging area and need to be committed.

What are some situations when branches would be helpful in keeping your history organized? How would branches help?
The master branch can be used as the stable version, allowing me to always get back to a working version. Branches can be used to try out new things, make changes and test, or separate out components. I can see branches being very useful in work environments. Having branches to build features, work on bugs, and experiment with allows you to be creative without the fear and consequences of making changes in a production environment. 

How do the diagrams help you visualize the branch structure?
 Since git is non-linear, a diagram allows me to map out where the different branches, what their parent is, and to see what changes I am working on in a commit that may not be connected to a branch and potentially lost if I open a master without connecting it or writing down its commit ID. The diagram also allows me to easily see multiple branches and what changes will be part of each branch. 

 What is the result of merging two branches together? Why do we represent it in the diagram the way we do?
 A merge brings in all changes from different branches, so the result is now a single file with all the combined code from the different branches into one new file. At the same time, it keeps all the prervious commits intact, giving me access to the history of changes that occured before the merge. It is represented in the diagram as two paths that have markers (commits) that meet and join into one new file, the new master. Its represented that way becuase the commits are still accessible from the new master.

What are the pros and cons of Gitâ€™s automatic merging vs. always doing merges manually?
The automatic merging can save the user a lot of time, especially when collaborating with others. It also allows you to focus only the changes that have conflicts. The cons is that automation is not perfect and can result in inconsistencies or overlooking changes that dont cause a conflict but could cause code to break. 
